const dotenv = require('dotenv'), fs = require('fs');
dotenv.load();

let cloudinary = require('cloudinary').v2;
let uploads = {};

    cloudinary.config({
      cloud_name: nou,
      api_key: nou,
      api_secret: nou,
    });

console.log('** ** ** ** ** ** ** ** ** Uploads ** ** ** ** ** ** ** ** ** **');

// File upload
cloudinary.uploader.upload('pizza.jpg',{tags:'basic_sample'},function(err,image){
  console.log('\n** File Upload');
  if (err){ console.warn(err);}
  console.log(`\n** File Upload (Promise)\n* public_id for the uploaded image is generated by Cloudinary's service.\n* ${image.public_id}\n* ${image.url}`);
  waitForAllUploads("pizza",err,image);
});


// Stream upload
var upload_stream= cloudinary.uploader.upload_stream({tags: 'basic_sample'},function(err,image) {
  console.log('\n** Stream Upload');
  if (err){ console.warn(err);}
  console.log(`* Same image, uploaded via stream\n* ${image.public_id}\n* ${image.url}`);
  waitForAllUploads("pizza3",err,image);
});
var file_reader = fs.createReadStream('pizza.jpg').pipe(upload_stream);


// File upload (example for promise api)
cloudinary.uploader.upload('pizza.jpg',{tags:'basic_sample'})
.then(function(image){console.log(`\n** File Upload (Promise)\n* public_id for the uploaded image is generated by Cloudinary's service.\n* ${image.public_id}\n* ${image.url}`);})
.catch(function(err){
  console.log('\n** File Upload (Promise)');
  if (err){ console.warn(err);}
});



// Public Id
cloudinary.uploader.upload('pizza.jpg',{tags: 'basic_sample',public_id:'my_favorite_pizza'},function(err,image){
  console.log('\n** Public Id');
  if (err){ console.warn(err);}
  console.log(`* Same image, uploaded with a custom public_id\n* ${image.public_id}\n* ${image.url}`);
  waitForAllUploads("pizza2",err,image);
});


// Eager Transformations:
// Applied as soon as the file is uploaded, instead of lazily applying them when accessed by your site's visitors.
var eager_options = { width: 200, height: 150, crop: 'scale', format: 'jpg' };
cloudinary.uploader.upload("lake.jpg", {tags : "basic_sample", public_id : "blue_lake", eager: eager_options}, function(err,image){
  // "eager" parameter accepts a hash (or just a single item). You can pass
  // named transformations or transformation parameters as we do here.
  console.log("\n** Eager Transformations");
  if (err){ console.warn(err);}
  console.log(`\n* ${image.public_id}\n* ${image.url}`);
  waitForAllUploads("lake",err,image);
});


// Remote URL:
// In the two following examples, the file is fetched from a remote URL and stored in Cloudinary.
// This allows you to apply transformations and take advantage of Cloudinary's CDN layer.
cloudinary.uploader.upload('http://res.cloudinary.com/demo/image/upload/couple.jpg', {tags : "basic_sample"}, function(err,image){
  console.log("\n** Remote Url");
  if (err){ console.warn(err);}
  console.log(`\n* ${image.public_id}\n* ${image.url}`);
  waitForAllUploads("couple",err,image);
});


// Here, the transformation is applied to the uploaded image BEFORE storing it on the cloud.
// The original uploaded image is discarded.
cloudinary.uploader.upload('http://res.cloudinary.com/demo/image/upload/couple.jpg', 
                           {"tags":"basic_sample","width":500,"height":500,"crop":"fit","effect":"saturation:-70"} ,
                           function(err,image){
                             console.log("\n** Remote Url");
                             if (err){ console.warn(err);}
                             console.log(`\n* ${image.public_id}\n* ${image.url}`);
                             waitForAllUploads("couple2",err,image);
                           });


 function waitForAllUploads(id,err,image){
   uploads[id] = image;
   var ids = Object.keys(uploads);
   if (ids.length==6){
     console.log('\n**  uploaded all files ('+ids.join(',')+') to cloudinary');
     performTransformations();
   }
 }

function performTransformations(){
  console.log('\n\n\n>> >> >> >> >> >> >> >> >> >>  Transformations << << << << << << << << << <<\n\n> Fit into 200x150');
    
  console.log(`> ${cloudinary.url(uploads.pizza2.public_id, {width: 200, height: 150, crop: "fit", format: "jpg"})}`);
  console.log("\n> Eager transformation of scaling to 200x150\n> " + cloudinary.url(uploads.lake.public_id, eager_options));
  console.log(`\n> Face detection based 200x150 thumbnail\n> ${cloudinary.url(uploads.couple.public_id, {width: 200, height: 150, crop: "thumb", gravity: "faces", format: "jpg"})}`);
  console.log(`\n> Fill 200x150, round corners, apply the sepia effect\n> ${cloudinary.url(uploads.couple2.public_id, {width: 200, height: 150, crop: "fill", gravity: "face", radius: 10, effect:"sepia", format: "jpg"})}`);
  
  console.log("\n> That's it. You can now open the URLs above in a browser\n> and check out the generated images.");
}
